// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calculateCrossValidationAdapter
Rcpp::List calculateCrossValidationAdapter(Rcpp::DataFrame data_matrix, Rcpp::String method, int number_of_folds, int precision, bool output_to_file);
RcppExport SEXP _rSRD_calculateCrossValidationAdapter(SEXP data_matrixSEXP, SEXP methodSEXP, SEXP number_of_foldsSEXP, SEXP precisionSEXP, SEXP output_to_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type data_matrix(data_matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_folds(number_of_foldsSEXP);
    Rcpp::traits::input_parameter< int >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< bool >::type output_to_file(output_to_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateCrossValidationAdapter(data_matrix, method, number_of_folds, precision, output_to_file));
    return rcpp_result_gen;
END_RCPP
}
// utilsRankingMatrix
Rcpp::DataFrame utilsRankingMatrix(Rcpp::DataFrame data_matrix);
RcppExport SEXP _rSRD_utilsRankingMatrix(SEXP data_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type data_matrix(data_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(utilsRankingMatrix(data_matrix));
    return rcpp_result_gen;
END_RCPP
}
// calculateSRDDistribution
Rcpp::List calculateSRDDistribution(Rcpp::DataFrame data_matrix, char option, double tie_probability, bool output_to_file);
RcppExport SEXP _rSRD_calculateSRDDistribution(SEXP data_matrixSEXP, SEXP optionSEXP, SEXP tie_probabilitySEXP, SEXP output_to_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type data_matrix(data_matrixSEXP);
    Rcpp::traits::input_parameter< char >::type option(optionSEXP);
    Rcpp::traits::input_parameter< double >::type tie_probability(tie_probabilitySEXP);
    Rcpp::traits::input_parameter< bool >::type output_to_file(output_to_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateSRDDistribution(data_matrix, option, tie_probability, output_to_file));
    return rcpp_result_gen;
END_RCPP
}
// calculateSRDValues
std::vector<double> calculateSRDValues(Rcpp::DataFrame data_matrix, bool output_to_file);
RcppExport SEXP _rSRD_calculateSRDValues(SEXP data_matrixSEXP, SEXP output_to_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type data_matrix(data_matrixSEXP);
    Rcpp::traits::input_parameter< bool >::type output_to_file(output_to_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateSRDValues(data_matrix, output_to_file));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rSRD_calculateCrossValidationAdapter", (DL_FUNC) &_rSRD_calculateCrossValidationAdapter, 5},
    {"_rSRD_utilsRankingMatrix", (DL_FUNC) &_rSRD_utilsRankingMatrix, 1},
    {"_rSRD_calculateSRDDistribution", (DL_FUNC) &_rSRD_calculateSRDDistribution, 4},
    {"_rSRD_calculateSRDValues", (DL_FUNC) &_rSRD_calculateSRDValues, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rSRD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
